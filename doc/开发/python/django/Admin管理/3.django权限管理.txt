权限和授权
Django本身提供了一个简单的权限系统。它提供了一种为特定用户和用户组分配权限的方法
Django自带有基本的权限管理 ，但粒度和限制权限的维度都只是针对具体的表，我们可以在django自带的权限基础进行扩展以实现更小粒度的控制

Django admin站点使用如下的权限：
    拥有该类型对象"add"权限的用户才可以访问"add"表单以及添加一个该类型对象
    查看修改列表、查看“change”表单以及修改一个对象的权利只限于具有该类型对象的“change”权限的用户拥有
    用户必须在一个对象上具有“delete”权限，才能删除这个对象
    权限不但可以根据每个对象的类型，而且可以根据特定的对象实例设置
    通过使用ModelAdmin类提供的has_add_permission()、has_change_permission()和has_delete_permission()方法，可以针对相同类型的不同对象实例自定义权限


扩展权限的注意事项：
    权限系统的设计对开发者、用户要实现透明，即他们不需要改变自己原有的使用系统或调用接口的方式
    权限要易扩展，灵活
    权限要能实现非常小的粒度的控制，甚至细致到一个按键某个用户是否能按。
    想对一个功能实现权限控制，要做到只能过在views方法上加一个装饰器就行



自定义权限思路:
    1.url必须设置name值(别名)
    2.建立权限名称和具体操作的关系映射，即权限名称与(urlname, 请求方法，参数列表)的对应关系,使用字典表示{'permission_name': ['urlname','GET',[]],}  GET请求方式,[]参数列表
    3.在models中建立权限的名称和描述信息
    4.建立一个权限表Permission,将权限的名称,url名称，请求方法(get or post),参数列表保存进去
    5.定义判断权限的方法


示例:
全局url配置:
    from django.conf.urls import url,include
    from django.contrib import admin

    urlpatterns = [
        url(r'^admin/', admin.site.urls),
        url(r'^app01/', include('app01.url1')),
    ]

app01 URL配置:
    from django.conf.urls import url
    from app01.views import *

    urlpatterns = [
        url(r'^test/$', test,name='test'),
    ]


建立权限表:
class Permission(models.Model):
    name = models.CharField("权限名称", max_length=64)         #权限的名称,需要和permissions对应
    url = models.CharField('URL名称', max_length=255)         #url为url name的值
    chioces = ((1, 'GET'), (2, 'POST'))                      #方法
    per_method = models.SmallIntegerField('请求方法', choices=chioces, default=1)
    argument_list = models.CharField('参数列表', max_length=255, help_text='多个参数之间用英文半角逗号隔开', blank=True, default='')           #参数列表,默认为''
    describe = models.CharField('描述', max_length=255)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = '权限表'
        verbose_name_plural = verbose_name
        permissions = (
            ('views_student_list', '查看主机列表'),               #显示的权限,每增加一个权限需要在这儿增加记录,并同步到数据库
            ('views_student_info', '查看组列表'),
        )


在于views同级的目录中创建permission.py文件:
#_*_ coding: utf-8 _*_

from django.shortcuts import render
from app01 import models
from django.db.models import Q
from django.core.urlresolvers import resolve                                    #url反解

def perm_check(request, *args, **kwargs):
    url_obj = resolve(request.path_info)
    url_name = url_obj.url_name                                                 #获取url对应的name值
    perm_name = ''                                                              #权限必须和urlname配合使得
    if url_name:
        url_method, url_args = request.method, request.GET                      #获取请求方法，和请求参数
        url_args_list = []

        #将各个参数的值用逗号隔开组成字符串，因为数据库中是这样存的
        for i in url_args:
            url_args_list.append(str(url_args[i]))
        url_args_list = ','.join(url_args_list)

        if url_method == 'GET':                                                 #在数据库中存储的真实数据(详细请参考chioces字段解释)
            url_method = 1
        elif url_method == 'POST':
            url_method = 2

        get_perm = models.Permission.objects.filter(url=url_name,per_method=url_method)         #执行数据库查询
        if get_perm:
            args_list = get_perm.values('argument_list')                        #获取参数对象
            for arg in args_list:
                args_value = arg.get('argument_list')
                if url_args_list == args_value:                                 #当参数匹配时跳出循环
                    break   
                elif args_value == '':                                          #当参数args_value=''时代表所有用户都拥有权限
                    break
            else:
                return False                                                    #如果没有匹配的参数则表示权限验证失败


            for i in get_perm:
                perm_name = i.name                                               #获取url对应的name
                perm_str = 'app01.%s' % perm_name                                #app01是app名,这儿是使用了路由分发
                if request.user.has_perm(perm_str):                              #调用django的权限验证方法,返回True或False
                    print('====>权限已匹配')
                    return True
            else:
                print('----->权限没有匹配')
                return False
        else:
            return False
    else:
        return False                                                    #没有权限设置，默认禁止访问



def check_permission(fun):                                              #定义一个装饰器，在views中调用
    def wapper(request, *args, **kwargs):
        if perm_check(request, *args, **kwargs):                        #调用上面定义的权限验证方法
            return fun(request, *args, **kwargs)                        #如果权限匹配则执行views函数
        return render(request, '403.html', locals())                    #如果权限不匹配则返回403页面
    return wapper



admin定制:
# -*- coding: utf-8 -*-
from __future__ import unicode_literals
from django.contrib import admin
from app01 import models


class AdminPermission(admin.ModelAdmin):
    list_display = ('name','url','per_method','argument_list','describe')


admin.site.register(models.Permission,AdminPermission)


views函数:
# -*- coding: utf-8 -*-
from __future__ import unicode_literals
from django.http import HttpResponse
from permission import *                                                #导入定义的权限检查模块

@check_permission                                                       #调用检查权限的装饰器
def test(request):                                                      
    return HttpResponse('权限验证通过')   




https://www.cnblogs.com/huangxm/p/5770735.html                      #参考博客(很多坑,小心)
















