Django提供一个“信号分发器”，允许解耦的应用在框架的其它地方发生操作时会被通知到。通俗来讲，就是一些动作发生的时候，信号允许特定的发送者去提醒一些接受者。


要接收信号，需要使用Signal.connect()方法注册接收器功能，发送信号时调用接收机功能。
Signal.connect(receiver, sender=None, weak=True, dispatch_uid=None)
    参数：	
        receiver                # 和这个信号连接的回调函数
        sender                  # 指定一个特定的sender，来从它那里接受信号
        weak                    # 以弱引用储存信号处理器。如果你的receiver是个局部变量，可能会被垃圾回收。当你调用信号的connect()方法时，传递weak=False来防止这样做。
        dispatch_uid            # 一个信号receiver的唯一标识符，以防信号多次发送


Django内置信号
    Model signals
        pre_init                    # django的modal执行其构造方法前，自动触发
        post_init                   # django的modal执行其构造方法后，自动触发
        pre_save                    # django的modal对象保存前，自动触发
        post_save                   # django的modal对象保存后，自动触发
        pre_delete                  # django的modal对象删除前，自动触发
        post_delete                 # django的modal对象删除后，自动触发
        m2m_changed                 # django的modal中使用m2m字段操作第三张表（add,remove,clear）前后，自动触发
        class_prepared              # 程序启动时，检测已注册的app中modal类，对于每一个类，自动触发

    Management signals
        pre_migrate                 # 执行migrate命令前，自动触发
        post_migrate                # 执行migrate命令后，自动触发

    Request/Response signals
        request_started             # 请求到来前，自动触发
        request_finished            # 请求结束后，自动触发
        got_request_exception       # 请求异常后，自动触发

    Test signals
        setting_changed             # 使用test测试修改配置文件时，自动触发
        template_rendered           # 使用test测试渲染模板时，自动触发

    Database Wrappers
        connection_created          # 创建数据库连接时，自动触发



django内置信号使用示例：
    #注册信号代码可以放在任何可导入地地方
    from django.core.signals import request_started                         #请求到来前触发
    from django.core.signals import request_finished                        #请求到来前触发
    from django.dispatch import receiver                                    #注册信号的装饰器

    @receiver(request_started)                              #注册信号，传递信号的类型
    def my_callback(sender, **kwargs):                      #必须有这两个参数
        print("Request started!")


    def callback(sender, **kwargs):                         #必须有这两个参数
        print("Request finished!")
    
    request_finished.connect(callback)                      #另一种注册信号的方法


views文件：
    def Signals(request):
        from app01.tsignals import my_callback              #访问指定页面触发这个信号，如果想要全局使用，将这个这条语句访问模块顶部即可
        return HttpResponse('ok')


自定义信号：
所有信号都是 django.dispatch.Signal的实例，providing_args是一个列表，由信号将提供给监听者的参数名称组成。

import django.dispatch
pizza_done = django.dispatch.Signal()                                                   
#pizza_done2 = django.dispatch.Signal(providing_args=["toppings", "size"])          #调用信号是必须传递2个参数


def Mycallback(sender, **kwargs):
    print("callback")

pizza_done.connect(Mycallback)                              #注册信号


def Customsignals(request):
    from app01.tsignals import pizza_done                                       #导入信号
    #pizza_done.send(sender='seven', toppings=123, size=456)                    #如果有参数必须传递，自定义的信号必须由自己手动调用
    pizza_done.send(sender='seven')                                             #sender为必须传递的参数
    return HttpResponse('test')

















