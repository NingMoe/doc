py正则表达式由re模块提供，需要导入

元字符：
^：匹配以什么开头
$：匹配以什么结尾
^$：匹配空行
[]：匹配一个指定范围内的内容


*：对于前一个字符重复0到无穷次
.：匹配任意一个字符无数次
？：对于前一个字符重复0到1次
{m,n}：匹配前一个字符最少m次，最多n次
{m}：对于前一个字符匹配最少m次
{0,n}：对于前一个字符匹配最多n次


\d：匹配任何十进制数         相当于类 [0-9]
\D：匹配任何非数字字符       相当于类 [^0-9]
\s：匹配任何空白字符         相当于类 [fv]
\S：匹配任何非空白字符       相当于类 [^fv]
\w：匹配任何字母数字字符     相当于类 [a-zA-Z0-9]
\W：匹配任何非字母数字字符   相当于类 [^a-zA-Z0-9]
\b：铆钉范围，通常用于匹配一个完整的字符串

模块：

findall('需要查找的字符串',‘目标数据’)：在目标字符串中查找符合规则的字符串
返回结果结果是一个列表， 中间存放的是符合规则的字符串。如果没有符合规则的字符串被找到，就返回一个空列表。


compile(r'需要查找的字符串')：事先编译，将编译的结果保存在一个变量中，可以起到加速的作用
例：
In [25]: url = 'www.benet.com'
In [26]: e = re.compile('o')
In [27]: e.findall(url)
Out[27]: ['o']


sub ('原数据','替换的数据','目标数据','替换次数')：默认替换全部
例：
In [46]: url = 'www.benet.com'
In [47]: u = re.sub('benet','magedu',url)
In [48]: print u
www.magedu.com


更强大的字符串匹配模块：
search('需要查找的字符串','目标数据')
匹配成功则返回一个对象，并且不会往后再匹配，通过操作对象，可以获得匹配的信息，匹配不成功则返回None

例：
In [17]: url = 'www.benet.com'
In [19]: w = re.search('w..',url)
In [20]: w.group()		//返回整个匹配	
Out[20]: 'www'	

In [21]: w.end()		//重第几个字符开始匹配
Out[21]: 1

In [22]: w.endpos		//到第几个字符结束
Out[22]: 13

In [32]: w.re			//显示编译的格式，如果没有手动编译则显示默认格式			
Out[32]: re.compile(r'w..')

search.group()：对象的属性，查看匹配到的数据


re.I：匹配时不区分大小写
例：
In [3]: url = 'WWW.BENET.COM.www.benet.com'
In [4]: re.findall('w',url,re.I)
Out[4]: ['W', 'W', 'W', 'w', 'w', 'w']
In [5]: re.findall('w',url)
Out[5]: ['w', 'w', 'w']
 







