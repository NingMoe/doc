文档对象模型(DOM)是一种用于HTML和XML文档的编程接口。它给文档提供了一种结构化的表示方法，可以改变文档的内容和呈现方式。


js提供的查找方式：

直接查找
    document.getElementById             根据ID获取一个标签
    document.getElementsByName          根据name属性获取标签集合
    document.getElementsByClassName     根据class属性获取标签集合
    document.getElementsByTagName       根据标签名获取标签集合


间接查找
    parentNode              父节点
    childNodes              所有子节点
    firstChild              第一个子节点
    lastChild               最后一个子节点
    nextSibling             下一个兄弟节点
    previousSibling         上一个兄弟节点
    parentElement           父节点标签元素
    children                所有子标签
    firstElementChild       第一个子标签元素
    lastElementChild        最后一个子标签元素
    nextElementtSibling     下一个兄弟标签元素
    previousElementSibling  上一个兄弟标签元素



js操作html文本
1、内容
    innerText   获取或更改文本内容
    innerHTML   获取或更改HTML内容
    value       获取或更改值


2、属性
    attributes                //获取所有标签属性
    setAttribute(key,value)   //设置标签属性
    getAttribute(key)         //获取指定标签属性
 

3、class操作
    className                // 获取所有类名
    classList.remove(cls)    // 删除指定类
    classList.add(cls)       // 添加类


4、其他操作
    console.log                 输出框
    alert                       弹出框
    confirm                     确认框
      
    // URL和刷新
    location.href               获取URL
    location.href = "url"       重定向
    location.reload()           重新加载
      
    // 定时器
    setInterval                 多次定时器
    clearInterval               清除多次定时器
    setTimeout                  单次定时器
    clearTimeout                清除单次定时器



5、提交表单
    document.geElementById('form').submit()


6、事件操作
    onclick                 #用户点击时触发
    onclick                 #鼠标点击元素时触发
    onfocus                 #元素获得焦点时触发
    onblue                  #元素失去焦点时触发




<input placeholder="请输入用户名">            #输入框灰色提示,相当于onfocus和onblue的结合


属性操作:
    attributes                              #获取指定标签的所有属性
    getAttribute('value')                   #获取指定标签的value属性
    removeAttribute('id')                   #删除指定标签的id属性


创建标签:
    var tag = '<span>用户名</span><input type=text>'
    document.getElementById('i1').insertAdjacentHTML('beforeEnd',tag)           #在id=i1的标签下面插入指定标签(tag)
        注意：第一个参数只能是'beforeBegin'、 'afterBegin'、 'beforeEnd'、 'afterEnd'



函数的绑定方式:
    <input id="i1" placeholder="dom0方式绑定">
    <input type="button" value="DOM0" onclick="dom0()"> <br/>

    <input id="i2" placeholder="dom1方式绑定">
    <input type="button" value="DOM1" id="i3"><br/>

    <input id="i4" placeholder="dom1方式绑定2">

    <script>
        //DOM0
        function dom0() {
            var Dom0 = document.getElementById('i1');
            alert(Dom0.value)
        }

        //DOM1
        var Dom1 = document.getElementById('i3');
        Dom1.onclick=(function () {
            var results = document.getElementById('i2');
            alert(results.value);
        })


        //DOM1示例2
        var dom1 = document.getElementById('i4');
        dom1.onclick = (function () {
            alert(this.value)               //this代表点击的当前标签
        })

    </script>

































