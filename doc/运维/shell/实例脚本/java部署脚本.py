#!/bin/env python
# -*- coding:utf8 -*-
# use for deploy in jenkins
# version: 1.0 edit by banbanqiu

import os,sys
import datetime,time
try:
    import argparse
except ImportError,e:
    os.system('yum install -y python-argparse')
    import argparse

"""
python /scripts/deploy.py java -u sirun -i proxy -d /usr/local -p 9080  \
        --jenkins-sftp-root-directory /usr/ -b /backup -c /usr/local/proxy/proxy.sh 
        --url-path http://192.168.9.50/sr1/proxy/ http://192.168.9.50/sr1/proxy/ http://192.168.9.50/sr1/proxy/ 
        --url-file proxy.sh log4j2.xml,mysql.properties,proxy.properties,serviceIF1Trans.xml,services.xml  send2carproxy.jar 
        --url-local-download-path /usr/local/proxy/ /usr/local/proxy/classes/ /usr/local/proxy/lib/
"""
#define optional check raise fucntion
def optional_check(func):
    def raise_error_msg():
        boo,msg = func(args)
        if not boo:
            raise argparse.ArgumentTypeError(msg)
    return raise_error_msg
#define tomcat legal checker 
@optional_check
def argument_legal_check(args):
    boo = True
    msg = ""
    #if output option is not use
    if args['output_project_name'] is None:
        boo = True
        msg = ""
    #or optput argument's number is less than input option arguents
    elif len(args['output_project_name']) != len(args['input_project_name']):
        boo = False
        msg = "the number of {NEW Project name} must same as the {Original Project name}\n \
                if you use -o option,it must have the same number of arguments with -i option.\n"
        return boo,msg
    #if tomcat dircetory is default or it's number equal input option arguments
    if len(args['Program_directory']) == 1 or len(args['Program_directory']) == len(args['input_project_name']):
        boo = True
        msg = ""
    #or it is illegal
    else:
        boo = False
        msg = "the number of {PROGRAM DIRECTORY} must same as the {Original Project name}\n \
            if you use -d option,it must have the same number of arguments with -i option.\n"
        return boo,msg
    #tomcat Port check, is default ? or it's numbers equal input arguments's number
    if len(args['program_port']) == 1  or len(args['program_port']) == len(args['input_project_name']):
        #ergodic all port
        for port in args['program_port']:
            if not (args['program_port'].count(port) == 1 and 0<port<65535):
                boo = False
                msg = "the {PROGRAM PORT} can't be double define and must be in range {0..65535}\n \
                    if you use -p option,it must have the same number of arguments with -i option.\n"
                return boo,msg
        boo = True
        msg = ""
    #or it is illegal
    else:
        boo = False
        msg = "the number of {PROGRAM PORT} must same as the {Original Project name}\n \
            if you use -p option,it must have the same number of arguments with -i option.\n"
        return boo,msg
    if 'url_path' in args or 'url_file' in args or 'usr_local_download_path' in args:
        if 'url_file' not in args or 'usr_local_download_path' not in args or 'url_path' not in args :
            boo = False
            msg = "the {URL PATH} must be use with {URL FILE} and {URL LOCAL DOWNLOAD PATH} \n \
                if you use --url-path option,you must use --url-file and --url-local-download-path at on time.\n"
            return boo,msg
    else:
        boo = True
        msg = ""
    return boo,msg
#define a directory exists checker
def directory(string):
    if os.path.isdir(string):return string
    else:raise argparse.ArgumentTypeError("\n%s is not a available directory!" % string)
    
#get all options and arguments
parser = argparse.ArgumentParser(description='use for deploy in jenkins',
    usage='%(prog)s [options]',
    epilog='More detail information,please contact banbanqiu!')
#generate a subparsers
subparsers = parser.add_subparsers(title='subcommands',description='valid subcommands',dest='Program_type',help='sub-command help')
#add program parser to subparsers
tomcat = subparsers.add_parser("tomcat",help='tomcat help :deploy tomcat application')
#add argument to tomcat subparsers
tomcat.add_argument('-i','--input',metavar='Original Project name',action='store',nargs='+',dest='input_project_name',required=True,
    help='''the project name need to deploy,the name is generated by jenkins''')
tomcat.add_argument('-o','--output',metavar='NEW Project name',action='store',nargs='+',dest='output_project_name',
    help='''the project name you want use in you server''')
tomcat.add_argument('-d','--directory',metavar='tomcat program directory',action='store',nargs='+',dest='Program_directory',type=directory,
    default=['/usr/local/tomcat'],
    help='''The tomcat program path,for example:/usr/local/tomcat''')
tomcat.add_argument('-p','--port',metavar='tomcat listen port',action='store',nargs='*',dest='program_port',
    required=True,
    default='8080',
    type=int,
    help='''The tomcat listen port''')
tomcat.add_argument('-u','--user',metavar='tomcat run user',action='store',nargs=1,dest='tomcat_run_user',
    required=True,default='sirun_app',help='tomcat run user')
tomcat.add_argument('--jenkins-sftp-root-directory',metavar='jenkins file transfer root directory',
    action='store',nargs=1,dest='jenkins_sftp_root_directory',default='/usr/local/',help='jenkins_sftp_root_directory')
tomcat.add_argument('-b','--backup-directory',metavar='backup older project file directory',
    action='store',nargs=1,dest='backup_path',default=['/backup'])
tomcat.add_argument('-c','--control-scripts',metavar='tomcat control scripts',
    action='store',nargs='+',dest='control_scripts',default=['/etc/init.d/tomcat'])
tomcat.add_argument('--url-path',action='store',nargs=1,dest='url_path',default=argparse.SUPPRESS,help='The config file download url')
tomcat.add_argument('--url-file',action='store',nargs='+',dest='url_file',default=argparse.SUPPRESS,help='The config file download file nmae')
tomcat.add_argument('--url-local-download-path',action='store',nargs='+',dest='usr_local_download_path',
    default=argparse.SUPPRESS,
    help='The config file download path in local system')
#add java parser to subparsers
java = subparsers.add_parser("java",help='java help: deploy other java appliaction')
#add argument to java subparsers
java.add_argument('-i','--input',metavar='Original Project name',action='store',nargs='+',dest='input_project_name',required=True,
    help='''the project name need to deploy,the name is generated by jenkins''')
java.add_argument('-o','--output',metavar='NEW Project name',action='store',nargs='+',dest='output_project_name',
    help='''the project name you want use in you server''')
java.add_argument('-d','--directory',metavar='java program directory',action='store',nargs='+',dest='Program_directory',type=directory,
    default=['/usr/local'],
    help='''The java program path,for example:/usr/local/program''')
java.add_argument('-p','--port',metavar='java listen port',action='store',nargs='*',dest='program_port',
    required=True,
    default='8080',
    type=int,
    help='''The java program listen port''')
java.add_argument('-u','--user',metavar='java run user',action='store',nargs=1,dest='java_run_user',
    required=True,default='sirun_app',help='java run user')
java.add_argument('--jenkins-sftp-root-directory',metavar='jenkins file transfer root directory',
    action='store',nargs=1,dest='jenkins_sftp_root_directory',default='/usr/',help='jenkins_sftp_root_directory')
java.add_argument('-b','--backup-directory',metavar='backup older project file directory',
    action='store',nargs=1,dest='backup_path',default=['/backup'])
java.add_argument('-c','--control-scripts',metavar='program control scripts',
    action='store',nargs='+',dest='control_scripts',required=True)
java.add_argument('--url-path',action='store',nargs='+',dest='url_path',default=argparse.SUPPRESS,help='The config file download url')
java.add_argument('--url-file',action='store',nargs='+',dest='url_file',default=argparse.SUPPRESS,help='The config file download file nmae')
java.add_argument('--url-local-download-path',action='store',nargs='+',dest='usr_local_download_path',
    default=argparse.SUPPRESS,
    help='The config file download path in local system')

#match the scripts input 
args = parser.parse_args(sys.argv[1:])
#to have dict-like view of the attributes,n use the standard Python idiom, vars()
args = vars(args)
print args


#define the command execute and print
def cmd_exec(string):
    print "Command:\n %s" % string
    r = os.popen(string)
    print "Result:\n" 
    for i in r.readlines():
        print i

timestamp_prefix = datetime.datetime.now().strftime("%Y-%m-%d-%H:%M:%S")
print "\n==============================================="


def owner_check(user,directory):
    cmd = "chown -R %s %s" % (user,directory)
    cmd_exec(cmd)
    
def tomcat():
    #check program is runing
    #check whether lsof is installed,if not,then install it
    os.system('which lsof > /dev/null && echo "lsof tool already installed" || yum install -y lsof')  
    def check_pid():
        pid_list=[]
        for single_program_port in args['program_port']:
            cmd = "/usr/sbin/lsof -n -P -t -i :%s" % single_program_port
            program_pid = os.popen(cmd).readlines()
            pid_list.extend(program_pid)
        return pid_list
    def stop_tomcat():
        pid_list = check_pid()
        while len(pid_list) != 0:
            print "Current running PID: %s" % " ".join(pid_list)
            print "Stoping Program" 
            for pid in pid_list:
                os.system('kill -9 %s' % pid.strip('\n'))
            time.sleep(3)
            pid_list = check_pid()
            
        print "The Program is stopped!"
        print "\n==============================================="

    def backup_publish_tomcat():
        #create  backup path
        if not os.path.isdir(args['backup_path'][0]):
            os.mkdir(args['backup_path'][0])
        
        print "\n==============================================="
        
        #backup the older project file
        print "Backup older foler"
        for i in xrange(0,len(args['input_project_name'])):
            if len(args['Program_directory']) == 1:
                tomcat_dir = args['Program_directory'][0]
            else:
                tomcat_dir = args['Program_directory'][i]
                
            if args['output_project_name'] is None:
                war_name = args['input_project_name'][0]+".war"
                project_name = args['input_project_name'][0]
                project_war_file = os.path.join(tomcat_dir,'webapps','%s' % war_name)
                project_folder = os.path.join(tomcat_dir,'webapps',project_name)
            else:
                war_name = args['output_project_name'][i]+".war"
                project_name = args['output_project_name'][i]
                project_war_file = os.path.join(tomcat_dir,'webapps','%s' % war_name)
                project_folder = os.path.join(tomcat_dir,'webapps',project_name)
            #backuo project directory
            print "backuo project {%s} directory" % project_name
            if os.path.isdir(project_folder):
                cmd = "mv %s %s/%s-%s" %(project_folder,args['backup_path'][0],project_name,timestamp_prefix)
                cmd_exec(cmd)
            #backup project .war file
            print "backup project {%s} file" % war_name
            if os.path.exists(project_war_file):
                cmd = "mv %s %s/%s-%s" %(project_war_file,args['backup_path'][0],war_name,timestamp_prefix)
                cmd_exec(cmd)
            #publish priject .war file
            print "publishing project {%s} file" % war_name
            cmd = "mv %s/%s.war %s" % (args['jenkins_sftp_root_directory'][0],args['input_project_name'][i],project_war_file)
            cmd_exec(cmd)
        print "\n==============================================="
    def start_tomcat():
        for project_start in args['control_scripts']:
            if args['tomcat_run_user'][0] == 'root':
                cmd = "%s start" % (args['tomcat_run_user'][0],project_start)
            else:
                cmd = "su - %s -c '%s start'" % (args['tomcat_run_user'][0],project_start)
            cmd_exec(cmd)
            print "tomcat is starting,please waiting......"
            time.sleep(15)
        print "\n==========================================================="
        print "Tomcat's running PID:" #print the tomcat running pid
        pid_list = check_pid()
        print pid_list
        print "\n==========================================================="
        print "Tomcat's running status: "
        for pid in pid_list:
            print "Tomcat process status:"
            cmd = "ps aux | grep /usr/java/jdk | grep -v grep |awk '$2=%s {print $0}'" % pid
            cmd_exec(cmd)
            print "Tomcat PID: %s" % pid
            print "Tomcat's running Port status: "
            cmd = "netstat -antup | grep %s" % pid
            cmd_exec(cmd)
        for single_Program_directory in args['Program_directory']:
            cmd = "ls %s/webapps" % single_Program_directory
            cmd_exec(cmd)
    def download_config():
        #if download url is exist
        if 'url_path' in args:
            download_path = args['url_path'][0]
            if not download_path.endswith('/'):
                download_path += "/"
            download_local_path = args['usr_local_download_path'][0]
            if not download_local_path.endswith('/'):
                download_local_path += "/"
            download_file_list = args['url_file']
            for config in download_file_list:
                cmd = "wget %s%s -O %s%s" % (download_path,config,download_local_path,config)
                cmd_exec(cmd)
    #execute function
    stop_tomcat()
    backup_publish_tomcat()
    start_tomcat()
    download_config()
    stop_tomcat()
    start_tomcat()

def java():
    print "This is java program deploy"
    print "\n==============================================="
    #check whether lsof is installed,if not,then install it
    os.system('which lsof > /dev/null && echo "lsof tool already installed" || yum install -y lsof')  
    def check_pid():
        pid_list=[]
        for single_program_port in args['program_port']:
            cmd = "/usr/sbin/lsof -n -P -t -i :%s" % single_program_port
            program_pid = os.popen(cmd).readlines()
            pid_list.extend(program_pid)
        return pid_list
    def stop_java():
        pid_list = check_pid()
        while len(pid_list) != 0:
            print "Current running PID: %s" % " ".join(pid_list)
            print "Stoping Program" 
            for pid in pid_list:
                os.system('kill -9 %s' % pid.strip('\n'))
            time.sleep(3)
            pid_list = check_pid()
        print "The Program is stopped!"
        print "\n==============================================="
    def backup_publish_java():
        #create  backup path
        if not os.path.isdir(args['backup_path'][0]):
            os.mkdir(args['backup_path'][0])
        print "\n==============================================="
        #backup the older project file
        print "Backup older foler"
        for i in xrange(0,len(args['input_project_name'])):
            if len(args['Program_directory']) == 1:
                program_dir = args['Program_directory'][0]
            else:
                program_dir = args['Program_directory'][i]
                
            if args['output_project_name'] is None:
                project_name = args['input_project_name'][0]
                project_folder = os.path.join(program_dir,project_name)
            else:
                project_name = args['output_project_name'][i]
                project_folder = os.path.join(program_dir,project_name)
            if project_folder.endswith('/'):
               project_folder = project_folder.rstrip('/')
            #backuo project directory
            print "backuo project {%s} directory" % project_name
            if os.path.isdir(project_folder):
                cmd = "mv %s %s/%s-%s" %(project_folder,args['backup_path'][0],project_name,timestamp_prefix)
                cmd_exec(cmd)
            #publish priject file
            print "publishing project {%s} file" % project_name
            cmd = "mv %s/%s %s" % (args['jenkins_sftp_root_directory'][0],args['input_project_name'][i],project_folder)
            cmd_exec(cmd)
            owner_check(args['java_run_user'][0],project_folder)
            #create the log directory
            if not os.path.isdir(os.path.join(project_folder,'log')):
                os.mkdir(os.path.join(project_folder,'log'))
                owner_check(args['java_run_user'][0],os.path.join(project_folder,'log'))
                print 'mkdir %s' % os.path.join(project_folder,'log')
        print "\n==============================================="
    def start_java():
        for project_start in args['control_scripts']:
            cmd = "chmod +x %s" % project_start
            cmd_exec(cmd)
            cmd = "%s start" % project_start
            cmd_exec(cmd)
            print "Java program is starting,please waiting......"
            time.sleep(15)
        print "\n==========================================================="
        print "program's running PID:" #print the tomcat running pid
        pid_list = check_pid()
        print pid_list
        print "\n==========================================================="
        print "Program's running status: "
        for pid in pid_list:
            print "Program process status:"
            cmd = "ps aux | grep /usr/java/jdk | grep -v grep |awk '$2=%s {print $0}'" % pid
            cmd_exec(cmd)
            print "Program PID: %s" % pid
            print "Program's running Port status: "
            cmd = "netstat -antup | grep %s" % pid
            cmd_exec(cmd)
        for single_Program_directory in args['Program_directory']:
            cmd = "ls %s/" % single_Program_directory
            cmd_exec(cmd)
    def download_config():
        #if download url is exist
        if 'url_path' in args:
            if len(args['url_path']) == 1:
                download_path = args['url_path'][0]
                if not download_path.endswith('/'):
                    download_path += "/"
                download_local_path = args['usr_local_download_path'][0]
                if not download_local_path.endswith('/'):
                    download_local_path += "/"
                download_file_list = args['url_file']
                for config in download_file_list:
                    cmd = "wget %s%s -O %s%s" % (download_path,config,download_local_path,config)
                    cmd_exec(cmd)
                    owner_check(args['java_run_user'][0],"%s%s" % (download_local_path,config))
            else:
                for i in range(0,len(args['url_path'])):
                    download_path = args['url_path'][i]
                    if not download_path.endswith('/'):
                        download_path += "/"
                    download_local_path = args['usr_local_download_path'][i]
                    if not download_local_path.endswith('/'):
                        download_local_path += "/"
                    download_file_list = args['url_file'][i].split(',')
                    for config in download_file_list:
                        cmd = "wget %s%s -O %s%s" % (download_path,config,download_local_path,config)
                        cmd_exec(cmd)
                        owner_check(args['java_run_user'][0],"%s%s" % (download_local_path,config))
    #execute function
    stop_java()
    backup_publish_java()
    download_config()
    start_java()
    
#execute legal check

def common():
    pass
argument_legal_check()
if args['Program_type'] == 'tomcat':
    tomcat()
if args['Program_type'] == 'java':
    java()
if args['Program_type'] == 'common':
    common()