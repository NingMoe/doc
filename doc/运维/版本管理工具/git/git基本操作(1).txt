获取 Git 仓库的两种方式：
    第一种是在现有项目或目录下导入所有文件到Git中
    第二种是从一个服务器克隆一个现有的Git仓库


初始化Git仓库：
    git init                #使Git能够管理当前目录(初始化)
    1、该命令将创建一个名为.git的子目录，这个子目录含有你初始化的Git仓库中所有的必须文件，这些文件是 Git 仓库的骨干
    2、如果你是在一个非空目录中初始化Git仓库来进行版本控制的话，你应该开始跟踪这些文件并提交
        git add *.py                 #跟踪当前目录下的所以.py文件(将文件放入暂存区域)                                      
        git commit -m 'version1'     #提交-m指定附加信息(将文件提交至Git仓库)


克隆现有的仓库
    如果想获得一份已存在的Git仓库，需要用到git clone命令，Git克隆的是该Git仓库服务器上的几乎所有数据，而不是仅仅复制完成你的工作所需要文件
    当执行git clone命令的时候，默认配置下远程Git仓库中的每一个文件的每一个版本都将被拉取下来
    如果你的服务器的磁盘坏掉了，你可以使用任何一个克隆下来的用户端来重建服务器上的仓库


    git clone [url]
    例：git clone https://github.com/libgit2/libgit2
    这会在当前目录下创建一个名为libgit2的目录，并在这个目录下初始化一个.git目录，从远程仓库拉取下所有数据放入libgit2目录
 

    git clone https://github.com/libgit2/libgit2 mylibgit
    这将执行与上一个命令相同的操作，不过在本地创建的仓库名字变为mylibgit。


工作目录下的每一个文件都只有两种状态：已跟踪或未跟踪
    已跟踪的文件指的是那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后，它们的状态可能处于未修改，已修改或已放入暂存区
    工作目录中除了已跟踪文件以外的所有其它文件都属于未跟踪文件，它们既不存在于上次快照的记录中，也没有放入暂存区


Git文件的生命周期：
    编辑过某些文件之后，由于自上次提交后你对它们做了修改，Git将它们标记为已修改文件
    我们将这些修改过的文件放入暂存区，然后提交所有暂存了的修改



检查当前文件状态
    git status              #查看Git仓库所以文件的状态

例：git status
    On branch master                                            #当前使用的Git分支(分支名称：master)
    nothing to commit, working directory clean                  #没有需要提交的文件(即当前目录从上一次提交之后没有发生任何改变)


例：echo 'My Project' > test.py
   git status
      On branch master
      Untracked files:                            #表示工作目录下面存在为跟踪的文件或目录
      (use "git add <file>..." to include in what will be committed)

          test.py                                 #显示为跟踪的文件或目录

      nothing added to commit but untracked files present (use "git add" to track)

      未跟踪的文件意味着Git在之前的快照中没有这些文件，Git 不会自动将之纳入跟踪范围，除非你明明白白地告诉它"我需要跟踪该文件"


跟踪新文件
    git add test.py
    此时再运行git status命令，会看到test.py文件已被跟踪，并处于暂存状态：

    git status
      On branch master
      Changes to be committed:                  #表示有需要提交的修改
        (use "git reset HEAD <file>..." to unstage)

          new file:  test.py                    #新文件(即以前快照中不存在的文件)  





暂存已修改文件
    git commit -m 'version-1'                       #提交前面的操作
    echo '#!/usr/bin/env python' > test.py          #修改test.py文件内容
    git status

        On branch master
        Changes not staged for commit:                  #未提交的跟改
          (use "git add <file>..." to update what will be committed)
          (use "git checkout -- <file>..." to discard changes in working directory)

            modified:   test.py                         #修改后的文件或目录

    git add test.py                     #将修改后的文件放入暂存区
    
    git status
      On branch master
      Changes to be committed:                  #表示有需要提交的修改
        (use "git reset HEAD <file>..." to unstage)

          modified:   test.py                   #修改后的文件或目录
    
    现在文件处于已暂存，下次提交时就会记录到仓库，此时如果，你更改了test.py的文件内容
    echo '#coding:utf-8' >> test.py             #修改test.py文件内容
    git status
        On branch master
        Changes to be committed:
        (use "git reset HEAD <file>..." to unstage)

            modified:   test.py

        Changes not staged for commit:
        (use "git add <file>..." to update what will be committed)
        (use "git checkout -- <file>..." to discard changes in working directory)

            modified:   test.py

    现在test.py文件同时出现在暂存区和非暂存区,实际上Git只不过暂存了你运行git add命令时的版本
    所以，运行了git add之后又作了修订的文件，需要重新运行git add把最新版本重新暂存起来

    git add test.py
    git commit -m 'version-2'               #提交更新(如果不使用-m选项时会出现一个默认编辑器让你输入更新的标记信息)


    git add是个多功能命令，可以用它跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等


git status -s：
    git status命令的输出十分详细，但其用语有些繁琐。使用 git status -s 命令将得到一种更为紧凑的格式输出

    新添加的未跟踪文件前面有 ?? 标记
    新添加到暂存区中的文件前面有 A 标记
    修改过的文件前面有 M 标记
        例：M test.py
            M  test.py
    M有两个可以出现的位置，出现在右边的 M 表示该文件被修改了但是还没放入暂存区，出现在靠左边的 M 表示该文件被修改了并放入了暂存区。




https://git-scm.com/book/zh/v2/Git-基础-获取-Git-仓库
https://git-scm.com/book/zh/v2/Git-基础-记录每次更新到仓库












































