dockerfile执行流程：
    docker build -t imagename:tag命令使用当前目录中的Dockerfile，并在你的本地计算机上构建一个名为imagename:tag的镜像
    1、Docker检查以确保构建环境成立
    2、Docker加载基础镜像。本地已经有的直接加载，本地没有的docker将自动下载
    3、依次执行dockerfile中的指令
    4、完成构建并输出结果
	
	注意一个镜像不能超过 127 层


Dockerfile关键字：

	FROM 			#指定使用的基础镜像

	MAINTAINER		#镜像维护者信息

	RUN				#执行指令

	CMD				#容器启动时执行的命令，只能有一条CMD，多条则只执行最后一条，启动容器时如果指定了运行的命令，则CMD被覆盖

	ENTRYPOINT		#容器启动时执行的命令，一个Dockerfile中只能有一条ENTRYPOINT，如果多条，则只执行最后一条，不会被RUN覆盖

	EXPORT			#指定开放的端口

	ENV				#指定一个环节变量，会不RUN指令使用，并且在容器运行时保持

	ADD				#复制指定的(文件，目录，URL，tar文件(自动解压))到容器中

	COPY			#复制本地主机的文件或目录到容器中，如果目标目录不存在时会自动创建

	VOLUME			#创建挂载点

	USER			#指定用户的UID或用户名，后续的RUN也会使用指定用户

	WORKDIR			#为后续的RUN,CMD,ENTRYPOINT等指令配置工作目录



使用格式：

	FROM image or FROM image:tag
		例：FROM ubuntu
	
	MAINTAINER <name>
		例：MAINTAINER test

	RUN <command>  or  RUN ["com1","com2","com3"]
		例：RUN apt-get install httpd
	
	CMD command
		例：mkdir /test
	
	EXPORT <port>
		例：EXPORT 22 80 8080
	
	ENV <KEY> <VALUE>
		例：ENV PATH=/opt:$PATH
	
	ADD <src> <dest>
		例：ADD /etc /opt
	
	COPY <src> <dest>
		例：ADD /etc /mun
	
	ENTRYPOINT command
		例：ENTRYPOINT mkdir /test2
	
	VOLUME [<dir>]
		例：VOLUME ['/test2']
	
	USER username
		例：USER root
		
	WORKDIR PATH
		例：WORKDIR /media
	
	
docker build -t imagename:tag dockerfile				#使用docker创建docker镜像


	
	























